[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/01-networkx.html",
    "href": "posts/01-networkx.html",
    "title": "myblog",
    "section": "",
    "text": "NetworkX is a network analysis library for Python.\n“The package provides classes for graph objects, generators to create standard graphs, IO routines for reading in existing datasets, algorithms to analyze the resulting networks and some basic drawing tools.”\nhttps://networkx.org/documentation/stable/reference/introduction.html\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n\nG = nx.Graph()\n\n\nG.add_nodes_from([1, 2, 3])\nG.nodes()\n\nNodeView((1, 2, 3))\n\n\n\nG.add_edge(1, 2)\nG.edges()\n\nEdgeView([(1, 2)])\n\n\n\nnx.draw(G)\nplt.show()\n\n\n\n\n\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\nnx.draw(G, with_labels=True, node_size=500, node_color='yellow')\nplt.show()\n\n\n\n\n\nG.add_edges_from([(1,3),(2,3)])\n\n\nG.edges\n\nEdgeView([(1, 2), (1, 3), (2, 3)])\n\n\n\nG.nodes\n\nNodeView((1, 2, 3))\n\n\n\nnx.draw(G, with_labels=True, node_size=500, node_color='yellow')\nplt.show()\n\n\n\n\n\nG = nx.Graph()\nG.add_edges_from([(1,2),(1,3),(1,4),(1,5),(1,6)])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\nnx.degree(G)\n\nDegreeView({1: 5, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1})\n\n\n\nnx.degree_centrality(G)\n\n{1: 1.0, 2: 0.2, 3: 0.2, 4: 0.2, 5: 0.2, 6: 0.2}\n\n\n\nnx.density(G)\n\n0.3333333333333333\n\n\n\nG = nx.Graph()\nG.add_edges_from([(1,2),(1,3),(1,4),(1,5),(1,6),(2,3)])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\nnx.degree(G)\n\nDegreeView({1: 5, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1})\n\n\n\nnx.degree_centrality(G)\n\n{1: 1.0, 2: 0.4, 3: 0.4, 4: 0.2, 5: 0.2, 6: 0.2}\n\n\n\nnx.density(G)\n\n0.4\n\n\n\nlist(nx.connected_components(G))\n\n[{1, 2, 3, 4, 5, 6}]\n\n\n\nnx.number_connected_components(G)\n\n1\n\n\n\nG = nx.Graph()\nG.add_edges_from([(1,2),(1,3),(1,4),(6,5)])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\nnx.degree_centrality(G)\n\n{1: 0.6000000000000001, 2: 0.2, 3: 0.2, 4: 0.2, 6: 0.2, 5: 0.2}\n\n\n\nlist(G.neighbors(1))\n\n[2, 3, 4]\n\n\n\nlist(G.neighbors(3))\n\n[1]\n\n\n\nlist(nx.connected_components(G))\n\n[{1, 2, 3, 4}, {5, 6}]\n\n\n\nnx.number_connected_components(G)\n\n2\n\n\n\nG = nx.Graph()\nG.add_edges_from([(1,2),(1,3),(1,4),(1,5),(1,6),(2,3)])\nnx.draw(G, with_labels=True)\nplt.show()\n\n\n\n\n\nnx.shortest_path(G,3,6)\n\n[3, 1, 6]\n\n\n\nnx.shortest_path(G)\n\n{1: {1: [1], 2: [1, 2], 3: [1, 3], 4: [1, 4], 5: [1, 5], 6: [1, 6]},\n 2: {2: [2], 1: [2, 1], 3: [2, 3], 4: [2, 1, 4], 5: [2, 1, 5], 6: [2, 1, 6]},\n 3: {3: [3], 1: [3, 1], 2: [3, 2], 4: [3, 1, 4], 5: [3, 1, 5], 6: [3, 1, 6]},\n 4: {4: [4],\n  1: [4, 1],\n  2: [4, 1, 2],\n  3: [4, 1, 3],\n  5: [4, 1, 5],\n  6: [4, 1, 6]},\n 5: {5: [5],\n  1: [5, 1],\n  2: [5, 1, 2],\n  3: [5, 1, 3],\n  4: [5, 1, 4],\n  6: [5, 1, 6]},\n 6: {6: [6],\n  1: [6, 1],\n  2: [6, 1, 2],\n  3: [6, 1, 3],\n  4: [6, 1, 4],\n  5: [6, 1, 5]}}\n\n\n\nnx.betweenness_centrality(G)\n\n{1: 0.9, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0}\n\n\n\nnx.edge_betweenness_centrality(G)\n\n{(1, 2): 0.26666666666666666,\n (1, 3): 0.26666666666666666,\n (1, 4): 0.3333333333333333,\n (1, 5): 0.3333333333333333,\n (1, 6): 0.3333333333333333,\n (2, 3): 0.06666666666666667}\n\n\n\n# load the graph\nG = nx.karate_club_graph()\n\n# visualize the graph\nnx.draw(G, with_labels = True)\n\n\n\n\n\nG.nodes\n\nNodeView((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))\n\n\n\nG.edges\n\nEdgeView([(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 10), (0, 11), (0, 12), (0, 13), (0, 17), (0, 19), (0, 21), (0, 31), (1, 2), (1, 3), (1, 7), (1, 13), (1, 17), (1, 19), (1, 21), (1, 30), (2, 3), (2, 7), (2, 8), (2, 9), (2, 13), (2, 27), (2, 28), (2, 32), (3, 7), (3, 12), (3, 13), (4, 6), (4, 10), (5, 6), (5, 10), (5, 16), (6, 16), (8, 30), (8, 32), (8, 33), (9, 33), (13, 33), (14, 32), (14, 33), (15, 32), (15, 33), (18, 32), (18, 33), (19, 33), (20, 32), (20, 33), (22, 32), (22, 33), (23, 25), (23, 27), (23, 29), (23, 32), (23, 33), (24, 25), (24, 27), (24, 31), (25, 31), (26, 29), (26, 33), (27, 33), (28, 31), (28, 33), (29, 32), (29, 33), (30, 32), (30, 33), (31, 32), (31, 33), (32, 33)])\n\n\n\nG.nodes(data=True)\n\nNodeDataView({0: {'club': 'Mr. Hi'}, 1: {'club': 'Mr. Hi'}, 2: {'club': 'Mr. Hi'}, 3: {'club': 'Mr. Hi'}, 4: {'club': 'Mr. Hi'}, 5: {'club': 'Mr. Hi'}, 6: {'club': 'Mr. Hi'}, 7: {'club': 'Mr. Hi'}, 8: {'club': 'Mr. Hi'}, 9: {'club': 'Officer'}, 10: {'club': 'Mr. Hi'}, 11: {'club': 'Mr. Hi'}, 12: {'club': 'Mr. Hi'}, 13: {'club': 'Mr. Hi'}, 14: {'club': 'Officer'}, 15: {'club': 'Officer'}, 16: {'club': 'Mr. Hi'}, 17: {'club': 'Mr. Hi'}, 18: {'club': 'Officer'}, 19: {'club': 'Mr. Hi'}, 20: {'club': 'Officer'}, 21: {'club': 'Mr. Hi'}, 22: {'club': 'Officer'}, 23: {'club': 'Officer'}, 24: {'club': 'Officer'}, 25: {'club': 'Officer'}, 26: {'club': 'Officer'}, 27: {'club': 'Officer'}, 28: {'club': 'Officer'}, 29: {'club': 'Officer'}, 30: {'club': 'Officer'}, 31: {'club': 'Officer'}, 32: {'club': 'Officer'}, 33: {'club': 'Officer'}})\n\n\n\n[i for i in G.nodes(data=True) if i[1]['club']=='Mr. Hi']\n\n[(0, {'club': 'Mr. Hi'}),\n (1, {'club': 'Mr. Hi'}),\n (2, {'club': 'Mr. Hi'}),\n (3, {'club': 'Mr. Hi'}),\n (4, {'club': 'Mr. Hi'}),\n (5, {'club': 'Mr. Hi'}),\n (6, {'club': 'Mr. Hi'}),\n (7, {'club': 'Mr. Hi'}),\n (8, {'club': 'Mr. Hi'}),\n (10, {'club': 'Mr. Hi'}),\n (11, {'club': 'Mr. Hi'}),\n (12, {'club': 'Mr. Hi'}),\n (13, {'club': 'Mr. Hi'}),\n (16, {'club': 'Mr. Hi'}),\n (17, {'club': 'Mr. Hi'}),\n (19, {'club': 'Mr. Hi'}),\n (21, {'club': 'Mr. Hi'})]\n\n\n\n# plot the communities\ncolor_map = []\nfor node in G.nodes(data=True):\n#    print(node)\n    if node[1]['club'] == 'Mr. Hi':\n        color_map.append('blue')\n    else: \n        color_map.append('green')  \n\nnx.draw(G, node_color=color_map, with_labels=True)\nplt.show()\n\n\n\n\n\nfrom networkx.algorithms.community.centrality import girvan_newman\n\n\ncommunities = girvan_newman(G)\n\nnode_groups = []\nfor com in next(communities):\n    node_groups.append(list(com))\n \nprint(node_groups)\n \ncolor_map = []\nfor node in G:\n    if node in node_groups[0]:\n        color_map.append('orange')\n    else:\n        color_map.append('yellow')\nnx.draw(G, node_color=color_map, with_labels=True)\nplt.show()\n\n[[0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21], [2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]]\n\n\n\n\n\n\nnx.density(G)\n\n0.13903743315508021\n\n\n\nfrom networkx.algorithms.community import greedy_modularity_communities\n\n\ncommunities = greedy_modularity_communities(G)\n# Create empty dictionary\nmodularity_class = {}\n#Loop through each community in the network\nfor community_number, community in enumerate(communities):\n    #For each member of the community, add their community number\n    for name in community:\n        modularity_class[name] = community_number\n\n\nmodularity_class\n\n{8: 0,\n 14: 0,\n 15: 0,\n 18: 0,\n 20: 0,\n 22: 0,\n 23: 0,\n 24: 0,\n 25: 0,\n 26: 0,\n 27: 0,\n 28: 0,\n 29: 0,\n 30: 0,\n 31: 0,\n 32: 0,\n 33: 0,\n 1: 1,\n 2: 1,\n 3: 1,\n 7: 1,\n 9: 1,\n 12: 1,\n 13: 1,\n 17: 1,\n 21: 1,\n 0: 2,\n 16: 2,\n 19: 2,\n 4: 2,\n 5: 2,\n 6: 2,\n 10: 2,\n 11: 2}\n\n\n\ncommunities = greedy_modularity_communities(G)\n\nnode_groups = []\nfor com in communities:\n    node_groups.append(list(com))\n \nprint(node_groups)\n \ncolor_map = []\nfor node in G:\n    if node in node_groups[0]:\n        color_map.append('blue')\n    elif node in node_groups[1]:\n        color_map.append('yellow')\n    else:\n        color_map.append('green')\nnx.draw(G, node_color=color_map, with_labels=True)\nplt.show()\n\n[[8, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], [1, 2, 3, 7, 9, 12, 13, 17, 21], [0, 16, 19, 4, 5, 6, 10, 11]]\n\n\n\n\n\n\nnx.degree_centrality(G)\n\n{0: 0.48484848484848486,\n 1: 0.2727272727272727,\n 2: 0.30303030303030304,\n 3: 0.18181818181818182,\n 4: 0.09090909090909091,\n 5: 0.12121212121212122,\n 6: 0.12121212121212122,\n 7: 0.12121212121212122,\n 8: 0.15151515151515152,\n 9: 0.06060606060606061,\n 10: 0.09090909090909091,\n 11: 0.030303030303030304,\n 12: 0.06060606060606061,\n 13: 0.15151515151515152,\n 14: 0.06060606060606061,\n 15: 0.06060606060606061,\n 16: 0.06060606060606061,\n 17: 0.06060606060606061,\n 18: 0.06060606060606061,\n 19: 0.09090909090909091,\n 20: 0.06060606060606061,\n 21: 0.06060606060606061,\n 22: 0.06060606060606061,\n 23: 0.15151515151515152,\n 24: 0.09090909090909091,\n 25: 0.09090909090909091,\n 26: 0.06060606060606061,\n 27: 0.12121212121212122,\n 28: 0.09090909090909091,\n 29: 0.12121212121212122,\n 30: 0.12121212121212122,\n 31: 0.18181818181818182,\n 32: 0.36363636363636365,\n 33: 0.5151515151515151}\n\n\n\ndc = nx.degree_centrality(G)\nfor i in sorted(dc, key=dc.get, reverse=True):\n    print('{:2d}: {:.3f}'.format(i, dc[i]))\n\n33: 0.515\n 0: 0.485\n32: 0.364\n 2: 0.303\n 1: 0.273\n 3: 0.182\n31: 0.182\n 8: 0.152\n13: 0.152\n23: 0.152\n 5: 0.121\n 6: 0.121\n 7: 0.121\n27: 0.121\n29: 0.121\n30: 0.121\n 4: 0.091\n10: 0.091\n19: 0.091\n24: 0.091\n25: 0.091\n28: 0.091\n 9: 0.061\n12: 0.061\n14: 0.061\n15: 0.061\n16: 0.061\n17: 0.061\n18: 0.061\n20: 0.061\n21: 0.061\n22: 0.061\n26: 0.061\n11: 0.030\n\n\n\ndc = nx.betweenness_centrality(G)\nfor i in sorted(dc, key=dc.get, reverse=True):\n    print('{:2d}: {:.3f}'.format(i, dc[i]))\n\n 0: 0.438\n33: 0.304\n32: 0.145\n 2: 0.144\n31: 0.138\n 8: 0.056\n 1: 0.054\n13: 0.046\n19: 0.032\n 5: 0.030\n 6: 0.030\n27: 0.022\n23: 0.018\n30: 0.014\n 3: 0.012\n25: 0.004\n29: 0.003\n24: 0.002\n28: 0.002\n 9: 0.001\n 4: 0.001\n10: 0.001\n 7: 0.000\n11: 0.000\n12: 0.000\n14: 0.000\n15: 0.000\n16: 0.000\n17: 0.000\n18: 0.000\n20: 0.000\n21: 0.000\n22: 0.000\n26: 0.000\n\n\n\ndc = nx.closeness_centrality(G)\nfor i in sorted(dc, key=dc.get, reverse=True):\n    print('{:2d}: {:.3f}'.format(i, dc[i]))\n\n 0: 0.569\n 2: 0.559\n33: 0.550\n31: 0.541\n 8: 0.516\n13: 0.516\n32: 0.516\n19: 0.500\n 1: 0.485\n 3: 0.465\n27: 0.458\n30: 0.458\n28: 0.452\n 7: 0.440\n 9: 0.434\n23: 0.393\n 5: 0.384\n 6: 0.384\n29: 0.384\n 4: 0.379\n10: 0.379\n17: 0.375\n21: 0.375\n24: 0.375\n25: 0.375\n12: 0.371\n14: 0.371\n15: 0.371\n18: 0.371\n20: 0.371\n22: 0.371\n11: 0.367\n26: 0.363\n16: 0.284\n\n\n\ndc = nx.eigenvector_centrality(G)\nfor i in sorted(dc, key=dc.get, reverse=True):\n    print('{:2d}: {:.3f}'.format(i, dc[i]))\n\n33: 0.373\n 0: 0.355\n 2: 0.317\n32: 0.309\n 1: 0.266\n 8: 0.227\n13: 0.226\n 3: 0.211\n31: 0.191\n30: 0.175\n 7: 0.171\n23: 0.150\n19: 0.148\n29: 0.135\n27: 0.133\n28: 0.131\n 9: 0.103\n14: 0.101\n15: 0.101\n18: 0.101\n20: 0.101\n22: 0.101\n17: 0.092\n21: 0.092\n12: 0.084\n 5: 0.079\n 6: 0.079\n 4: 0.076\n10: 0.076\n26: 0.076\n25: 0.059\n24: 0.057\n11: 0.053\n16: 0.024"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "NetworkX\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 6, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 3, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]